var path = require("path");
var PATHS = {
    util: path.join(__dirname, "src", "test", "e2e", "util"),
    page: path.join(__dirname, "src", "test", "e2e", "page"),
    screenshot: path.join(__dirname, "results", "screenshot"),
    results: path.join(__dirname, "results")
};

var HtmlScreenshotReporter = require("protractor-jasmine2-screenshot-reporter");
var screenshotReporter = new HtmlScreenshotReporter({
    dest: PATHS.screenshot,
    filename: "screenshot-report.html",
    ignoreSkippedSpecs: true,
    captureOnlyFailedSpecs: true
});

exports.config = {
    baseUrl: "http://localhost:8042/memetics/",
    framework: "jasmine",
    suites: {
        full : "src/test/e2e/spec/*.spec.js",
        new : "src/test/e2e/spec/2_meme.new.e2e-spec.ts"
    },
    capabilities: {
        browserName: "chrome",
        chromeOptions: {
            args: [
                "--start-maximized",
                "--disable-extensions",
                "--disable-web-security"
            ],
            prefs: {
                "download": {
                    "prompt_for_download": false
                },
                "credentials_enable_service": false
            }
        }
    },
    onPrepare: function() {
        global.requirePage = function (name) {
            return require(PATHS.page + "/" + name + ".page.js");
        };

        global.requireUtil = function (name) {
            return require(PATHS.util + "/" + name + ".js");
        };

        var jasmineReporters = require("jasmine-reporters");
        jasmine.getEnv().addReporter(
            new jasmineReporters.JUnitXmlReporter({
                consolidateAll: true,
                savePath: PATHS.results,
                filePrefix: "xmloutput"
            }));

        jasmine.getEnv().addReporter(screenshotReporter);
    },
    beforeLaunch: function() {
        return new Promise(function(resolve){
            screenshotReporter.beforeLaunch(resolve);
        });
    },
    afterLaunch: function(exitCode) {
        return new Promise(function(resolve){
            screenshotReporter.afterLaunch(resolve.bind(this, exitCode));
        });
    }
};